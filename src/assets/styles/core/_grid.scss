// ===================================================================
// Flexbox Grid Mixins (Simplified)
// Version 0.2.1
// Description: Sass Mixins to generate Flexbox grid
// Author: thingsym
// GitHub: https://github.com/thingsym/flexbox-grid-mixins
// MIT License
// ===================================================================

@charset 'utf-8';

@use "sass:math";

@mixin container($width: $container-width) {
  margin: 0 auto;
  padding-left: $container-gutter-desktop;
  padding-right: $container-gutter-desktop;
  width: 100%;

  @if unitless($width) == true or unit($width) == 'px' {
    max-width: $width + $container-gutter-desktop * 2;
  } @else {
    max-width: calc(#{$width} + #{$container-gutter-desktop * 2});
  }

  @include tablet {
    @if unitless($width) == true or unit($width) == 'px' {
      max-width: $width + $container-gutter-tablet * 2;
    } @else {
      max-width: calc(#{$width} + #{$container-gutter-tablet * 2});
    }

    padding-left: $container-gutter-tablet;
    padding-right: $container-gutter-tablet;
  }

  @include mobile-l {
    @if unitless($width) == true or unit($width) == 'px' {
      max-width: $width + $container-gutter-mobile * 2;
    } @else {
      max-width: calc(#{$width} + #{$container-gutter-mobile * 2});
    }

    padding-left: $container-gutter-mobile;
    padding-right: $container-gutter-mobile;
  }
}

@mixin grid($flex-direction: null, $flex-wrap: null, $flex-flow: null, $justify-content: null, $align-items: null, $align-content: null, $gutter: null) {
  display: flex;

  @if $flex-direction {
    flex-direction: $flex-direction;
  }

  @if $flex-wrap {
    flex-wrap: $flex-wrap;
  }

  @if $flex-flow {
    flex-flow: $flex-flow;
  }

  @if $justify-content {
    justify-content: $justify-content;
  }

  @if $align-items {
    align-items: $align-items;
  }

  @if $align-content {
    align-content: $align-content;
  }

  @if $gutter {
    margin-left: math.div($gutter, 2) * -1;
    margin-right: math.div($gutter, 2) * -1;
  }

  @content;
}

@mixin grid-col($col: null, $col-offset: null, $gutter: $grid-gutter, $flex-grow: 0, $flex-shrink: 1, $flex-basis: auto) {
  @if type-of($col) == number and unitless($col) == true {
    $flex-shrink: 0;
    $flex-basis: percentage(math.div($col, $grid-columns));

    @if $gutter and unit($gutter) == '%' {
      $flex-basis: $flex-basis - $gutter;
    } @else if $gutter and unitless($gutter) == false {
      $flex-basis: calc(#{$flex-basis} - #{$gutter});
    }

    @if $col-offset and unit($col-offset) == '%' {
      $flex-basis: $flex-basis + $col-offset;
    } @else if $col-offset and unitless($col-offset) == false {
      $flex-basis: calc(#{$flex-basis} + #{$col-offset});
    }
  } @else if type-of($col) == number and unitless($col) == false {
    $flex-grow: 0;
    $flex-shrink: 0;
    $flex-basis: $col;
  }

  flex-basis: $flex-basis;
  flex-grow: $flex-grow;
  flex-shrink: $flex-shrink;

  @if $gutter and unitless($gutter) == false {
    margin-left: math.div($gutter, 2);
    margin-right: math.div($gutter, 2);
  }

  @content;
}
